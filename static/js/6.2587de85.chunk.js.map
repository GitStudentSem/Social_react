{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Input","props","restProps","child","createField","placeholder","name","validators","component","text","validate","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GACvB,IAAIA,EAGJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,EAAMG,OAASD,EACjB,MAAM,iBAAN,OAAwBA,EAAxB,e,4LCLEE,EAAc,SAAC,GAAkD,EAAhDC,MAAiD,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAChDC,EAAWH,GAAWC,EAE5B,OACE,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACE,8BAAMC,IACLC,GAAY,+BAAOF,QAKbM,EAAQ,SAACC,GACpB,IAAQV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACX,EAAD,2BAAiBW,GAAjB,aACE,iDAAWV,GAAWW,QAKfE,EAAc,SACzBC,EACAC,EACAC,EACAC,GAGI,IAFJP,EAEG,uDAFK,GACRQ,EACG,uDADI,GAEP,OACE,gCACE,cAAC,IAAD,aACEJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPP,IACH,IACFQ,O,iCCzCP,2FAqCME,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EA5BL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcpB,EAAY,EAAZA,MACjC,OACE,uBAAMqB,SAAUD,EAAhB,UACGV,YAAY,aAAc,QAAS,CAACnB,KAAWe,KAE/CI,YAAY,gBAAiB,WAAY,CAACnB,KAAWe,IAAO,CAC3DgB,KAAM,aAGPZ,YACC,KACA,aACA,GACAJ,IACA,CACEgB,KAAM,YAER,eAGDtB,GAAS,qBAAKG,UAAWC,IAAEmB,iBAAlB,SAAqCvB,IAC/C,8BACE,mDAyBOwB,uBAHS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAEmB,CAAEE,WAA3BJ,EAjBD,SAACjB,GAIb,OAAIA,EAAMmB,OACD,cAAC,IAAD,CAAUG,GAAI,aAGrB,gCACE,uCACA,cAACZ,EAAD,CAAgBI,SATH,SAACS,GAChBvB,EAAMqB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.2587de85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__xrhZx\",\"error\":\"FormsControls_error__UoLKa\",\"formSummaryError\":\"FormsControls_formSummaryError__1XbeL\"};","export const required = (value) => {\r\n  if (value) {\r\n    return undefined;\r\n  }\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  }\r\n  return undefined;\r\n};\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder,\r\n  name,\r\n  validators,\r\n  component,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />{\" \"}\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { login } from \"../../redux/authReducer\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField(\"Your Email\", \"email\", [required], Input)}\r\n\r\n      {createField(\"Your Password\", \"password\", [required], Input, {\r\n        type: \"password\",\r\n      })}\r\n\r\n      {createField(\r\n        null,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        {\r\n          type: \"checkbox\",\r\n        },\r\n        \"Remember me\"\r\n      )}\r\n\r\n      {error && <div className={s.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe);\r\n  };\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}